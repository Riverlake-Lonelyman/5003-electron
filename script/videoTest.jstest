const videoPlayer = document.getElementById("video-player");
const videoIdSpan = document.getElementById("video-id");
const exitBtn = document.getElementById("exit-btn");
const popup = document.getElementById("popup");
const { captureWebcamShot } = require("videoCapture.js");
let screenshotCount = 0;

const randomIndex = Math.floor(Math.random() * 12) + 1;
const selectedVideo = `videos/${randomIndex}.MP4`;
videoPlayer.src = selectedVideo;
videoIdSpan.textContent = randomIndex;

exitBtn.addEventListener("click", () => {
  const videoId = videoIdSpan.textContent;
  window.location.href = `testFinish.html?video_id=${videoId}`;
});

videoPlayer.addEventListener("ended", () => {
  popup.style.display = "block";
});

// 获取摄像头视频流
navigator.mediaDevices
  .getUserMedia({ video: true })
  .then((stream) => {
    const videoElement = document.createElement("video");
    videoElement.srcObject = stream;
    videoElement.style.display = "none";
    videoElement.play();

    videoElement.addEventListener("canplay", () => {
      const canvas = createCanvas(
        videoElement.videoWidth,
        videoElement.videoHeight
      );
      const context = canvas.getContext("2d");

      const intervalId = setInterval(() => {
        context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);
        captureWebcamShot(videoElement, randomIndex, screenshotCount);
        screenshotCount++;
      }, 500);
    });
    // 视频播放结束时停止拍照
    videoPlayer.addEventListener("ended", () => {
      clearInterval(intervalId);
      stream.getTracks().forEach((track) => track.stop());
    });
  })
  .catch((error) => {
    if (error.name === "NotAllowedError") {
      console.error("User denied the camera access");
      alert("You need to allow camera access to take screenshots.");
    } else {
      console.error("Error accessing the camera", error);
    }
  });
